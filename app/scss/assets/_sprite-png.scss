/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$facebook-name: 'facebook';
$facebook-x: 1200px;
$facebook-y: 42px;
$facebook-offset-x: -1200px;
$facebook-offset-y: -42px;
$facebook-width: 195px;
$facebook-height: 33px;
$facebook-total-width: 1402px;
$facebook-total-height: 1500px;
$facebook-image: '../img/sprite.png';
$facebook: (1200px, 42px, -1200px, -42px, 195px, 33px, 1402px, 1500px, '../img/sprite.png', 'facebook', );
$index-block-name: 'index-block';
$index-block-x: 0px;
$index-block-y: 0px;
$index-block-offset-x: 0px;
$index-block-offset-y: 0px;
$index-block-width: 1200px;
$index-block-height: 1500px;
$index-block-total-width: 1402px;
$index-block-total-height: 1500px;
$index-block-image: '../img/sprite.png';
$index-block: (0px, 0px, 0px, 0px, 1200px, 1500px, 1402px, 1500px, '../img/sprite.png', 'index-block', );
$main-logo-name: 'main-logo';
$main-logo-x: 1200px;
$main-logo-y: 75px;
$main-logo-offset-x: -1200px;
$main-logo-offset-y: -75px;
$main-logo-width: 56px;
$main-logo-height: 65px;
$main-logo-total-width: 1402px;
$main-logo-total-height: 1500px;
$main-logo-image: '../img/sprite.png';
$main-logo: (1200px, 75px, -1200px, -75px, 56px, 65px, 1402px, 1500px, '../img/sprite.png', 'main-logo', );
$search-button-name: 'search-button';
$search-button-x: 1200px;
$search-button-y: 0px;
$search-button-offset-x: -1200px;
$search-button-offset-y: 0px;
$search-button-width: 202px;
$search-button-height: 42px;
$search-button-total-width: 1402px;
$search-button-total-height: 1500px;
$search-button-image: '../img/sprite.png';
$search-button: (1200px, 0px, -1200px, 0px, 202px, 42px, 1402px, 1500px, '../img/sprite.png', 'search-button', );
$twitter-name: 'twitter';
$twitter-x: 1256px;
$twitter-y: 75px;
$twitter-offset-x: -1256px;
$twitter-offset-y: -75px;
$twitter-width: 34px;
$twitter-height: 18px;
$twitter-total-width: 1402px;
$twitter-total-height: 1500px;
$twitter-image: '../img/sprite.png';
$twitter: (1256px, 75px, -1256px, -75px, 34px, 18px, 1402px, 1500px, '../img/sprite.png', 'twitter', );
$spritesheet-width: 1402px;
$spritesheet-height: 1500px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($facebook, $index-block, $main-logo, $search-button, $twitter, );
$spritesheet: (1402px, 1500px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
